name: Tests and code quality

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
      - "renovate/**"

jobs:
  pre_job:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: Delay push triggered run
        if: github.event_name == 'push'
        run: sleep 30s
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@v3
        with:
          concurrent_skipping: same_content
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
          skip_after_successful_duplicate: true
  virtual-env:
    name: Build virtual environment
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    outputs:
      python_version: ${{ steps.get-python-version.outputs.python_version }}
    steps:
      - uses: actions/checkout@v3
      - name: Get Python version from Dockerfile
        id: get-python-version
        run: echo "::set-output name=python_version::$(grep 'FROM python.*AS final' Dockerfile | grep -oP 'python:\K[\d.]+')"
      - name: Set up Python ${{ steps.get-python-version.outputs.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ steps.get-python-version.outputs.python_version }}
      - name: Get Poetry version to install
        id: poetry-version
        run: |
          source poetry_install_vars.sh
          echo "::set-output name=version::$POETRY_VERSION"
      - name: Install Poetry ${{ steps.poetry-version.outputs.version }}
        uses: Gr1N/setup-poetry@v8
        with:
          poetry-version: ${{ steps.poetry-version.outputs.version }}
      - name: Set up Poetry cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
      - name: Install dependencies
        run: poetry install --no-interaction
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: "true"
      # Archive virtual environment to keep file permissions
      - name: Archive virtual environment
        run: tar -acf /tmp/virtual-environment.tar.zst .venv/
      - name: Upload virtual environment artifact
        uses: actions/upload-artifact@v3
        with:
          name: virtual-environment
          path: /tmp/virtual-environment.tar.zst
          if-no-files-found: error
          retention-days: 1
  code-quality:
    name: Code quality
    runs-on: ubuntu-latest
    needs:
      - virtual-env
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ needs.virtual-env.outputs.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ needs.virtual-env.outputs.python_version }}
      - name: Download virtual environment artifact
        uses: actions/download-artifact@v3
        with:
          name: virtual-environment
          path: /tmp
      - name: Extract virtual environment
        run: |
          tar -xf /tmp/virtual-environment.tar.zst
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - uses: pre-commit/action@v2.0.3
        env:
          SKIP: mypy
        with:
          extra_args: --all-files --verbose
      - name: Set up mypy cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/mypy
          key: ${{ runner.os }}-mypy-${{ hashFiles('src/opcua_webhmi_bridge/**/*.py') }}
          restore-keys: |
            ${{ runner.os }}-mypy-
      - name: Check static typing of the main package
        run: mypy src/opcua_webhmi_bridge
      - name: Lint Dockerfile
        uses: hadolint/hadolint-action@v2.1.0
  unit-tests:
    name: Unit tests and code coverage
    runs-on: ubuntu-latest
    needs:
      - virtual-env
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ needs.virtual-env.outputs.python_version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ needs.virtual-env.outputs.python_version }}
      - name: Download virtual environment artifact
        uses: actions/download-artifact@v3
        with:
          name: virtual-environment
          path: /tmp
      - name: Extract virtual environment
        run: |
          tar -xf /tmp/virtual-environment.tar.zst
          echo "$PWD/.venv/bin" >> $GITHUB_PATH
      - name: Run unit tests
        run: pytest -vv --cov-report=xml --timeout=120 tests/unit
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          flags: unittests
          fail_ci_if_error: true
  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest
    needs: pre_job
    if: needs.pre_job.outputs.should_skip != 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Run integration tests
        run: docker-compose -f tests/integration/docker-compose.yml run --rm --use-aliases integration-tests
      - name: Print logs of services
        if: always()
        run: docker-compose -f tests/integration/docker-compose.yml logs
